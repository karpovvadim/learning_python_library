                        Вступление

«Библиотека Python» содержит несколько различных типов компонентов.

Она содержит типы данных, которые обычно считаются частью «ядра» языка, такие как числа
и списки. Для этих типов ядро языка Python определяет форму литералов и накладывает
некоторые ограничения на их семантику, но не определяет семантику полностью.
(С другой стороны, ядро языка определяет синтаксические свойства, такие как правописание
и приоритеты операторов.)

Библиотека также содержит встроенные функции и исключения — объекты, которые могут
использоваться во всем коде Python без необходимости оператора импорта. Некоторые из них
определяются базовым языком, но многие не являются существенными для базовой семантики и
описаны только здесь.

Однако основная часть библиотеки состоит из набора модулей. Есть много способов
разобрать эту коллекцию. Некоторые модули написаны на C и встроены в интерпретатор
Python; другие написаны на Python и импортированы в исходном виде. Некоторые модули
предоставляют интерфейсы, которые очень специфичны для Python, например печать
трассировки стека; некоторые предоставляют интерфейсы, специфичные для конкретных
операционных систем, например доступ к определенному оборудованию; другие предоставляют
интерфейсы, специфичные для конкретного домена приложений, например World Wide Web.
Некоторые модули доступны во всех версиях и портах Python; другие доступны только тогда,
когда базовая система их поддерживает или требует; третьи доступны только в том случае,
если конкретный параметр конфигурации был выбран во время компиляции и установки Python.

Это руководство организовано «изнутри наружу»: сначала в нем описываются встроенные
функции, типы данных и исключения и, наконец, модули, сгруппированные в главы связанных
модулей.

Это означает, что если вы начнете читать это руководство с самого начала и пропустите
следующую главу, когда вам станет скучно, вы получите разумный обзор доступных модулей и
областей приложений, поддерживаемых библиотекой Python. Конечно, вам необязательно
читать его как роман — вы также можете просматривать оглавление (в начале руководства)
или искать конкретную функцию, модуль или термин в указателе (в конце). И, наконец, если
вам нравится изучать случайные темы, вы выбираете случайный номер страницы (см. модуль
random) и читаете один или два раздела. Независимо от порядка, в котором вы читаете разделы
данного руководства, рекомендуется начать с главы «Встроенные функции», так как оставшаяся
часть руководства предполагает знакомство с этим материалом.
Да начнется шоу!
                    Примечания о наличии

     Примечание «Доступность: Unix» означает, что эта функция обычно используется в
     системах Unix. Он не делает никаких заявлений о его существовании в конкретной
     операционной системе.

     Если не указано иное, все функции, заявленные как «Доступность: Unix»,
     поддерживаются в macOS, построенной на ядре Unix.

     Если примечание о доступности содержит как минимальную версию ядра, так и
     минимальную версию libc, то оба условия должны выполняться. Например, для функции
     с пометкой Доступность: Linux >= 3.17 с glibc >= 2.27 требуется как Linux 3.17 или
     новее, так и glibc 2.27 или новее.

                    Платформы WebAssembly

Платформы WebAssembly wasm32-emscripten (Emscripten) и wasm32-wasi (WASI) предоставляют
подмножество API POSIX. Среды выполнения WebAssembly и браузеры изолированы и имеют
ограниченный доступ к хосту и внешним ресурсам. Любой модуль стандартной библиотеки
Python, который использует процессы, многопоточность, сеть, сигналы или другие формы
межпроцессного взаимодействия (IPC), либо недоступен, либо может не работать, как в
других Unix-подобных системах. Файловый ввод-вывод, файловая система и функции, связанные
с разрешениями Unix, также ограничены. Emscripten не разрешает блокировать ввод-вывод.
Другие блокирующие операции, такие как sleep(), блокируют цикл событий браузера.

Свойства и поведение Python на платформах WebAssembly зависят от версии Emscripten-SDK
или WASI-SDK, среды выполнения WASM (браузер, NodeJS, wasmtime) и флагов времени сборки
Python. WebAssembly, Emscripten и WASI являются развивающимися стандартами; некоторые
функции, такие как работа в сети, могут поддерживаться в будущем.

Для Python в браузере пользователям следует рассмотреть Pyodide или PyScript. PyScript
построен поверх Pyodide, который, в свою очередь, построен поверх CPython и Emscripten.
Pyodide предоставляет доступ к API-интерфейсам JavaScript и DOM браузеров, а также к
ограниченным сетевым возможностям с помощью API-интерфейсов JavaScript XMLHttpRequest и
Fetch.

     API-интерфейсы, связанные с процессами, недоступны или всегда завершаются с ошибкой.
     Сюда входят API, которые порождают новые процессы (fork(), execve()), ждут процессов
     (waitpid()), отправляют сигналы (kill()) или иным образом взаимодействуют с
     процессами. Подпроцесс импортируется, но не работает.

     Модуль сокетов доступен, но он ограничен и ведет себя не так, как на других
     платформах. В Emscripten сокеты всегда неблокирующие и требуют дополнительного
     кода JavaScript и помощников на сервере для проксирования TCP через WebSockets;
     см. Emscripten Networking для получения дополнительной информации. Предварительный
     просмотр снимков WASI 1 разрешает сокеты только из существующего файлового
     дескриптора.

     Некоторые функции являются заглушками, которые либо ничего не делают, либо всегда
     возвращают жестко заданные значения.

     Функции, связанные с файловыми дескрипторами, правами доступа к файлам, владением
     файлами и ссылками, ограничены и не поддерживают некоторые операции. Например,
     WASI не разрешает символические ссылки с абсолютными именами файлов.

     Что такое WASI: это системный интерфейс для платформы WebAssembly.
