d = dict({'one': 1, 'three': 3}, two=2)

print("\n---get(key[, default])---Возвращает значение key, если key находится в словаре,"
      " иначе default.")
# Если значение по умолчанию не указано, по умолчанию используется None,
# поэтому этот метод никогда не вызывает KeyError")
print(d.get('two'))

print("\n---items()---Возвращает новый вид элементов словаря (пары (key, value))."
      " См. документацию объектов представления.")
print(d.items())

print("\n---keys()---Возвращает новое представление ключей словаря."
      " См. документацию объектов представления.")
print(d.keys())

print("\n--- pop(key[, default])----------------------------")
# Если key находится в словаре, удалить его и вернуть его значение, иначе вернуть значение
# default. Если значение default не указано и key отсутствует в словаре, возникает KeyError")
z1 = d.pop('one')
z2 = d.pop('one', None)
print("'one' =", z1, d)
print("'one' =", z2, d)

print("\n----popitem()-------------------------------")
# Удалить и вернуть пару (key, value) из словаря. Пары возвращаются в порядке LIFO.
# popitem() полезен для деструктивного перебора словаря, что часто используется в алгоритмах
# множества. Если словарь пуст, вызов popitem() вызывает KeyError.
# Изменено в версии 3.7: Порядок LIFO теперь гарантирован. В предыдущих версиях popitem()
# возвращал произвольную пару ключ/значение.
z = d.popitem()
print("z =", z, "\nd =", d)

print("\n---reversed(d)------------------------------")
# Возвращает обратный итератор по ключам словаря. Это ярлык для reversed(d.keys()).
d = dict({'one': 1, 'three': 3}, two=2)
d_rev = reversed(d)
print("d =", d, "\nd_rev =", d_rev)
# Добавлено в версии 3.8.

print("\n---setdefault(key[, default])----------------")
# Если key находится в словаре, вернуть его значение. Если нет, вставить key со значением
# default и вернуть значение default. default — None.
z1 = d.setdefault('one')
z2 = d.setdefault('four', 4)
print("'one' =", z1, "'four' =", z2, "\nd =", d)

print("\n----update([other])--------------------------")
# Обновить словарь парами ключ/значение из other, перезаписав существующие ключи.
# Возвращает None.
# update() принимает либо другой объект словаря, либо итерацию пар ключ/значение (в виде
# кортежей или других итераций длины два). Если указаны ключевые аргументы, словарь
# обновляется этими парами ключ/значение: d.update(red=1, blue=2).
d.update(red=[1], blue=[2])
print(d)

print("\n-----values()-----------------------------------")
# Возвращает новое представление значений словаря. См. документация объектов представления.
# Сравнение равенства между одним представлением dict.values() и другим всегда будет
# возвращать False. Это также применимо при сравнении dict.values() с самим собой:
print(d.values())
print(d.values() == d.values())

print("\n---- d | other-------------------------------------")
# Создайте новый словарь с объединенными ключами и значениями d и других, которые должны
# быть словарями. Значения other имеют приоритет, когда d и other используют общие ключи.
other = {'a': 11, 'b': 22, 'one': 1111}
print(d | other)
#      Новое в версии 3.9.

print("\n--- d |= other----------------------------------")
# Обновите словарь d ключами и значениями из других, которые могут быть либо отображением,
# либо итерацией пар ключ/значение. Значения other имеют приоритет, когда d и other
# используют общие ключи.
# возможность обновлять словарь новыми парами ключ-значение с помощью итерируемого объекта
# — например, списка или генератора:
a = {'a': 'one', 'b': 'two'}
print(a)
b = ((i, i**2) for i in range(3))
a |= b
print(a)  # {'a': 'one', 'b': 'two', 0: 0, 1: 1, 2: 4})
#      Новое в версии 3.9.
