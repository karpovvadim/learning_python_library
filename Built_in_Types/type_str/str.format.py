"""str.format(*args, **kwargs)"""
# Выполните операцию форматирования строки. Строка, для которой вызывается этот метод,
# может содержать буквенный текст или поля замены, разделенные фигурными скобками {}.
# Каждое поле замены содержит либо числовой индекс позиционного аргумента, либо имя ключевого
# аргумента. Возвращает копию строки, в которой каждое поле замены заменяется строковым
# значением соответствующего аргумента.
print("The sum of 1 + 2 is {0}".format(1 + 2))
#  >>>  'The sum of 1 + 2 is 3'
# Примечание
# При форматировании числа (int, float, complex, decimal.Decimal и подклассы) с типом n
# (например: '{:n}'.format(1234)) функция временно устанавливает место действия LC_CTYPE
# на локаль LC_NUMERIC для декодирования. поля decimal_point и thousands_sep в localeconv(),
# если они не ASCII или длиннее 1 байта, а локаль LC_NUMERIC отличается от места действия
# LC_CTYPE. Это временное изменение влияет на другие потоки.
# Изменено в версии 3.7: при форматировании числа с типом n функция в некоторых случаях
# временно устанавливает место действия LC_CTYPE на место действия LC_NUMERIC.
#        Format String Syntax  (Синтаксис строки формата)
# Метод str.format() и класс Formatter используют один и тот же синтаксис для строк формата
# (хотя в случае Formatter подклассы могут определять свой собственный синтаксис строки
# формата). Синтаксис похож на форматированные строковые литералы, но менее сложен и,
# в частности, не поддерживает произвольные выражения.
# Строки формата содержат «поля замены», заключенные в фигурные скобки {}. Все, что не
# заключено в фигурные скобки, считается буквальным текстом, который без изменений
# копируется в выходной файл. Если вам нужно включить символ фигурной скобки в обычный
# текст, его можно избежать, удвоив: {{ и }}.
# Грамматика для замещающего поля выглядит следующим образом:
# replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"
# поле замены ::= "{" [имя_поля] ["!" преобразование] [":" format_spec] "}"
# field_name        ::=  arg_name ("." attribute_name | "[" element_index "]")*
# имя поля ::= имя_аргумента ("." имя_атрибута | "["
# arg_name          ::=  [identifier | digit+] (имя аргумента ::= [идентификатор | цифра+])
# attribute_name    ::=  identifier (имя атрибута ::= идентификатор)
# element_index     ::=  digit+ | index_string (индекс элемента ::= цифра+ | index_string)
# index_string      ::=  <any source character except "]"> +
# индексная строка ::= <любой исходный символ, кроме "]"> +
# conversion        ::=  "r" | "s" | "a"   (преобразование ::)
# format_spec       ::=  <described in the next section>
# спецификация формата ::= <описано в следующем разделе>
#       Встроенный метод format() возвращает форматированное представление заданного
# значения, управляемое спецификатором формата.
#       Функция format() аналогична методу формата String. Внутри оба метода вызывают метод
# __format __() объекта. В то время как format() в Python является реализацией низкого
# уровня для внутреннего форматирования объекта с использованием __format __(),
# string format() является реализацией более высокого уровня, способной также выполнять
# сложные операции форматирования с несколькими строками объекта.
# Синтаксис функции:
# format(value[, format_spec])
# Функция принимает два параметра:
# значение — значение, которое нужно отформатировать.
# format_spec — спецификация того, как значение должно быть отформатировано.
# Спецификатор формата может иметь следующий формат:
# [[fill]align][sign][#][0][width][,][.precision][type]
# where, the options are
# fill        ::=  any character          (заполнить ::= любой символ)
# align       ::=  "<" | ">" | "=" | "^"  ( выровнять ::= "<" | ">" | "=" | "^")
# sign        ::=  "+" | "-" | " "        (знак # ::= "+" | "-" | " ")
# width       ::=  integer                (ширина ::= целое число)
# precision   ::=  integer                ( точность ::= целое число)
# type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" |
# "o" | "s" | "x" | "X" | "%"
print("------Форматирование чисел с помощью format()--------------------------")
print(format(123, "d"))  # integer
print(format(123.4567898, "f"))  # float arguments
print(format(12, "b"))  # binary format
print(format(1234, "*>+17,d"))  # integer
print(format(123.4567, "^-09.3f"))  # float number
# Здесь при форматировании целого числа 1234 мы указали спецификатор форматирования
# *> + 7, d. Давайте разберемся с каждым вариантом:
# 1. * — это символ заполнения, который заполняет пустые места после форматирования
# 2. > — это опция выравнивания по правому краю, которая выравнивает строку вывода
# по правому краю.
# 3. + — Это опция знака, которая заставляет число быть подписанным (со знаком слева)
# 4. 17 — это параметр ширины, который заставляет число принимать минимальную ширину 7,
# остальные пробелы будут заполнены символом заполнения
# 5. , — Это оператор тысяч, который ставит запятую между всеми тысячами.
# 6. d — это параметр типа, который указывает, что число является целым числом.
# При форматировании числа с плавающей запятой 123.4567 мы указали спецификатор
# формата ^ -09.3f. Это:
# 1. ^ — Это опция выравнивания по центру, которая выравнивает выходную строку по
# центру оставшегося пространства.
# 2. — — Это опция знака, которая заставляет показывать только отрицательные числа
# 3. 0 — это символ, который ставится вместо пустых мест.
# 4. 9 — Это параметр ширины, который устанавливает минимальную ширину числа 9
# (включая десятичную точку, запятую тысяч и знак)
# 5. .3 — Это оператор точности, который устанавливает точность заданного числа с
# плавающей запятой в 3 разряда.
# 6. f — это параметр типа, который указывает, что число является плавающим.
print("------Использование format() путем переопределения __format __()------------")


class Person:
    def __format__(self, _format):  # custom __format__() method
        if _format == 'age':        # (пользовательский метод __format__())
            return '23'
        return 'None'


print(format(Person(), "age"))
#  Здесь мы переопределили метод __format __() класса Person. Теперь он принимает
#  параметр формата и возвращает 23, если он равен ‘age’. Если формат не указан,
#  возвращается None. Функция внутренне запускает Person() .__ format __ («age»),
#  чтобы вернуть 23.
