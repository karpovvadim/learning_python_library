""" class range(start, stop[, step])"""
# Аргументы конструктора диапазона должны быть целыми числами (либо встроенным int, либо
# любым объектом, реализующим специальный метод __index__). Если аргумент step пропущен,
# по умолчанию используется 1. Если start аргумент пропущен, по умолчанию используется 0.
# Если step равен нулю, вызывается ValueError.

# Для положительного step содержимое диапазона r определяется формулой r[i] = start + step*i,
# где i >= 0 и r[i] < stop.

# Для отрицательного step содержимое диапазона по-прежнему определяется формулой
# r[i] = start + step*i, но ограничениями являются i >= 0 и r[i] > stop.

# Объект range будет пустым, если r[0] не соответствует ограничению значения. Диапазоны
# действительно поддерживают отрицательные индексы, но они интерпретируются как индексация
# от конца последовательности, определяемой положительными индексами.

# Диапазоны, содержащие абсолютные значения, превышающие sys.maxsize, разрешены, но некоторые
# функции (например, len()) могут вызывать OverflowError.

print(list(range(10)))
print(list(range(1, 11)))
print(list(range(0, 30, 5)))
print(list(range(0, 10, 3)))
print(list(range(0, -10, -1)))
print(list(range(0)))
print(list(range(1, 0)))

# Диапазоны реализуют все общие операции последовательности, кроме конкатенации и повторения
# (из-за того, что объекты диапазона могут представлять только последовательности, которые
# следуют строгому шаблону, а повторение и объединение обычно нарушают этот шаблон).

#     start
#         Значение start параметра (или 0, если параметр не указан)

#     stop
#         Значение параметра stop

#     step
#         Значение параметра step (или 1, если параметр не указан)

# Преимущество типа range перед обычным list или tuple заключается в том, что объект range
# всегда будет занимать один и тот же (небольшой) объем памяти, независимо от размера
# диапазона, который он представляет (поскольку он хранит только значения start, stop и step
# значения, вычисляя отдельные элементы и поддиапазоны по мере необходимости).

# Объекты диапазона реализуют collections.abc.Sequence ABC и предоставляют такие функции,
# как проверку на включение, поиск индекса элемента, срезы и поддержку отрицательных индексов
# (см. Типы последовательностей — list, tuple, range):

print()
r = range(0, 20, 2)
print(r)
print(11 in r)
print(10 in r)
print(r.index(10))
print(r[5])
print(r[:5])
print(r[-1])

# При проверке объектов диапазона на равенство с == и != они сравниваются как
# последовательности. То есть два объекта диапазона считаются равными, если они представляют
# одну и ту же последовательность значений. (Обратите внимание, что два сравниваемых объекта
# диапазона могут иметь разные атрибуты start, stop и step, например range(0) == range(2, 1, 3)
# или range(0, 3, 2) == range(0, 4, 2).)

# Изменено в версии 3.2: Реализована ABC последовательность. Поддерживают нарезку и
# отрицательные индексы. Проверяет объекты int на принадлежность к постоянному времени
# вместо повторения всех элементов.

# Изменено в версии 3.3: Определены «==» и «!=» для сравнения объектов диапазона на основе
# последовательности значений, которые они определяют (вместо сравнения на основе
# идентичности объекта).

# Добавлено в версии 3.3: Атрибуты start, stop и step.

# См.также
#      linspace recipe показывает, как реализовать ленивую версию диапазона, подходящую для
# приложений с плавающей запятой.

