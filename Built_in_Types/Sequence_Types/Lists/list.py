""" class list([iterable])"""
# Списки могут быть созданы несколькими способами:

#     Использование пары квадратных скобок для обозначения пустого списка: []
#     Использование квадратных скобок, разделяя элементы запятыми: [a], [a, b, c]
#     Использование списковых включений (list comprehension): [x for x in iterable]
#     Использование конструктора типов: list() or list(iterable)

# Конструктор строит список, элементы которого такие же и в том же порядке, что и iterable
# элементы. iterable может быть либо последовательностью, контейнером, поддерживающим
# итерацию, либо объектом-итератором. Если iterable уже является списком, создаётся и
# возвращается копия, аналогично iterable[:]. Например, list('abc') возвращает
# ['a', 'b', 'c'], а list( (1, 2, 3) ) возвращает [1, 2, 3]. Если аргумент не указан,
# конструктор создаёт новый пустой список [].
l1 = []
l2 = ['a', 'b', 'c']
l3 = [x for x in range(4)]
l4 = list(('a', 'b', 'c'))
l5 = list('abc')
l6 = list()
print('\n', l1, '\n', l2, '\n', l3, '\n', l4, '\n', l5, '\n', l6)

# Многие другие операции также создают списки, включая встроенный sorted().
print("\nsorted([5, 2, 3, 1, 4]) =", sorted([5, 2, 3, 1, 4]))

# Списки реализуют все операции последовательности общие и изменяемые. Списки также
# предоставляют следующий дополнительный метод:
"""sort(*, key=None, reverse=False)"""
