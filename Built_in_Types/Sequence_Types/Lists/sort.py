"""sort(*, key=None, reverse=False)"""
# Метод сортирует список на месте, используя только сравнения < между элементами. Исключения
# не подавляются — если какая-либо операция сравнения завершится неудачно, вся операция
# сортировки завершится неудачно (и список, скорее всего, останется в частично изменённом
# состоянии).
# sort() принимает два аргумента, которые могут быть переданы только по ключевому слову
# (только ключевые аргументы):
# key указывает функцию одного аргумента, которая используется для извлечения ключа сравнения
# из каждого элемента списка (например, key=str.lower). Ключ, соответствующий каждому
# элементу в списке, вычисляется один раз, а затем используется для всего процесса сортировки.
# Значение по умолчанию None означает, что элементы списка сортируются напрямую, без
# вычисления отдельного значения key.
# Утилита functools.cmp_to_key() доступна для преобразования функции cmp стиля 2.x в key
# функцию.
# reverse — это логическое значение. Если установлено значение True, то элементы списка
# сортируются, как если бы каждое сравнение было обратным.
# Метод изменяет существующую последовательность для экономии места при сортировке большой
# последовательности. Чтобы напомнить пользователям, что он работает как побочный эффект,
# он не возвращает отсортированную последовательность (используйте sorted() для явного
# запроса нового экземпляра отсортированного списка).
# Гарантированно стабильный метод sort(). Сортировка является стабильной, если она гарантирует
# не изменять относительный порядок элементов, которые сравниваются равными — это полезно для
# сортировки за несколько проходов (например, сортировка по отделам, затем по величине
# зарплаты).
# Примеры сортировки и краткое руководство по сортировке см. в HOWTO по сортировке.

a = [5, 2, 3, 1, 4]
a.sort()
print(a)
a = [5, 2, 3, 1, 4, 6]
a.sort(reverse=1)
print(a)
data = ['red1', 'Blue', 'red2', 'blue2']
data.sort()
print(data)
