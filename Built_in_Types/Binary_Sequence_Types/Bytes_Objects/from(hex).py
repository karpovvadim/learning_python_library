"""classmethod fromhex(string)"""
# Метод класса bytes возвращает объект байтов, декодируя заданный строковый объект. Строка
# должна содержать две шестнадцатеричные цифры на байт, при этом пробелы ASCII игнорируются.

print("---------fromhex(string)---------------------------------")
b = bytes.fromhex('2Ef0 F1f2  ')  # b'.\xf0\xf1\xf2'
print(b)

# Изменено в версии 3.7: bytes.fromhex() теперь пропускает все пробелы ASCII в строке,
# а не только пробелы.

# Функция обратного преобразования существует для преобразования байтового объекта в его
# шестнадцатеричное представление.

"""hex([sep[, bytes_per_sep]])"""
# Возвращает строковый объект, содержащий две шестнадцатеричные цифры для каждого байта
# в экземпляре.

print("\n---------hex()------------------------------------------")
a = b'\xf0\xf1\xf2'.hex()
print(a)

# Если вы хотите сделать шестнадцатеричную строку более удобной для чтения, вы можете
# указать параметр sep-разделителя, состоящий из одного символа, для включения в вывод.
# По умолчанию между каждым байтом. Второй необязательный параметр bytes_per_sep управляет
# интервалом. Положительные значения вычисляют позицию разделителя справа, отрицательные
# значения — слева.

value = b'\xf0\xf1\xf2'
print("\n---------hex([sep]))-------------------------------------")

print(value.hex('-'))  # 'f0-f1-f2'

print("\n---------hex([sep[, bytes_per_sep]]))--------------------")

print(value.hex('_', 2))  # 'f0_f1f2'

print(b'UUDDLRLRAB'.hex(' ', -4))
