
# Байты Объекты
#
# Объекты Bytes представляют собой неизменяемые последовательности одиночных байтов.
# Поскольку многие основные двоичные протоколы основаны на текстовой кодировке ASCII,
# объекты bytes предлагают несколько методов, которые допустимы только при работе с
# данными, совместимыми с ASCII, и во многих других отношениях тесно связаны со
# строковыми объектами.
# Во-первых, синтаксис для байтовых литералов во многом такой же, как и для строковых
# литералов, за исключением добавления префикса b:
# Одинарные кавычки: b'по-прежнему позволяет использовать встроенные двойные кавычки'
# Двойные кавычки: b "по-прежнему разрешены встроенные одинарные кавычки"
# Тройные кавычки: b'''3 одинарных кавычки''', b"""3 двойных кавычки"""
# В байтовых литералах разрешены только символы ASCII (независимо от объявленной
# кодировки исходного кода). Любые двоичные значения свыше 127 должны быть введены в
# байтовые литералы с использованием соответствующей управляющей последовательности.
# Как и в случае строковых литералов, байтовые литералы также могут использовать
# префикс r для отключения обработки escape-последовательностей. Дополнительные
# сведения о различных формах литералов байтов, включая поддерживаемые
# escape-последовательности, см. в разделе Литералы String и Bytes.
# В то время как литералы и представления байтов основаны на тексте ASCII, объекты
# байтов на самом деле ведут себя как неизменяемые последовательности целых чисел,
# причем каждое значение в последовательности ограничено таким образом, что 0 <= x < 256
# (попытки нарушить это ограничение вызовут ValueError). Это сделано намеренно, чтобы
# подчеркнуть, что, хотя многие двоичные форматы включают элементы на основе ASCII и ими
# можно с пользой манипулировать с помощью некоторых тексто-ориентированных алгоритмов,
# это обычно не относится к произвольным двоичным данным (слепое применение алгоритмов
# обработки текста к двоичным форматам данных, которые не совместимы с ASCII,
# обычно приводит к повреждению данных), (которые не поддерживаются).
# В дополнение к литеральным формам объекты bytes могут быть созданы несколькими
# другими способами:
# Заполненный нулями объект байтов указанной длины: bytes(10)
# Из итерации целых чисел: байты (диапазон (20))
# Копирование существующих двоичных данных через буферный протокол: bytes(obj)
#
# Также см. встроенные байты.
#
# Поскольку 2 шестнадцатеричных цифры точно соответствуют одному байту, шестнадцатеричные числа являются широко используемым форматом для описания двоичных данных. Соответственно, тип bytes имеет дополнительный метод класса для чтения данных в этом формате:
import os

print(os.getcwd())
print(os.pardir)

