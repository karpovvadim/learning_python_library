"""os.urandom(size, /)"""
# Возвращает строку случайных байтов size, подходящую для криптографического использования.
# Функция возвращает случайные байты из источника случайности, зависящего от ОС.
# Возвращаемые данные должны быть достаточно непредсказуемыми для криптографических
# приложений, хотя их точное качество зависит от реализации ОС.
# В Linux, если доступен системный вызов getrandom(), он используется в режиме
# блокировки: блокировать до тех пор, пока не будет инициализирован пул случайной
# энтропии системы (ядро собирает 128 бит энтропии). См. обоснование в PEP 524.
# В Linux функцию getrandom() можно использовать для получения случайных байтов в
# неблокирующем режиме (с использованием флага GRND_NONBLOCK) или для опроса до тех
# пор, пока не будет инициализирован пул случайной энтропии системы.
# В Unix-подобной системе случайные байты считываются с устройства /dev/urandom.
# Если устройство /dev/urandom недоступно или не читается, возникает исключение
# NotImplementedError.
#     В Windows он будет использовать CryptGenRandom().
#     См.также
#     Модуль secrets обеспечивает функции более высокого уровня. Чтобы получить
# простой в использовании интерфейс для генератора случайных чисел, предоставляемый
# вашей платформой, см. random.SystemRandom.
#     Изменено в версии 3.6.0: В Linux getrandom() теперь используется в режиме
# блокировки для повышения безопасности.
#     Изменено в версии 3.5.2: В Linux, если системный вызов getrandom() блокируется
# (пул случайной энтропии ещё не инициализирован), вернуться к чтению /dev/urandom.
#     Изменено в версии 3.5: В Linux 3.17 и новее теперь используется системный вызов
# getrandom(), если он доступен. В OpenBSD 5.6 и новее теперь используется функция C
# getentropy(). Эти функции избегают использования внутреннего файлового дескриптора.

import os

# Declaring size (Объявление размера)
size = 5

# Using os.urandom() method
result = os.urandom(size)

# Print the random bytes string (Напечатать случайную строку байтов)
# Output will be different everytime (Вывод каждый раз будет разным)
print(result)
