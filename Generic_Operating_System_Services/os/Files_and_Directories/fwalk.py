"""os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)"""
# Это ведет себя точно так же, как walk(), за исключением того, что выдает 4 кортежа
# (dirpath, dirnames, filenames, dirfd) и поддерживает dir_fd.
# dirpath, имена каталогов и имена файлов идентичны выходным данным walk(), а
# dirfd — это файловый дескриптор, ссылающийся на каталог dirpath.
# Эта функция всегда поддерживает пути относительно дескрипторов каталогов, а
# не по символическим ссылкам. Обратите внимание, однако, что, в отличие от других
# функций, значение по умолчанию fwalk() для follow_symlinks
# (следовать символическим ссылкам) равно False.
#      Запись
# Так как fwalk() возвращает дескрипторы файлов, они действительны только до следующего
# шага итерации, поэтому вам следует продублировать их (например, с помощью dup()),
# если вы хотите сохранить их дольше.
# В этом примере показано количество байтов, занимаемых файлами, не входящими в каталоги,
# в каждом каталоге в начальном каталоге, за исключением того, что он не просматривается
# ни в одном из подкаталогов CVS:
import os
print((os.listdir('.')))
for root, dirs, files, rootfd in os.fwalk(top='./'):
    print(root, "consumes", end="")
    print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),
          end="")
    print("bytes in", len(files), "non-directory files")
    if 'CVS' in dirs:
        dirs.remove('CVS')  # не посещать каталоги CVS
# В следующем примере важно пройтись по дереву снизу вверх: rmdir() не позволяет удалить
# каталог, пока он не станет пустым:
#      # Удаляем все достижимое из каталога с именем "top",
#      # при условии отсутствия символических ссылок.
#      # ОСТОРОЖНО: Это опасно! Например, если top == '/', это
#      # может удалить все ваши файлы на диске.
# заменено на os.path.join:
print('-----------------------------------------------------------')
for root, dirs, files, rootfd in os.fwalk(".", topdown=False):
    for name in files:
        print('     name in files:', os.path.join(root, name))
    for name in dirs:
        print('name in dirs:', os.path.join(root, name))
# Вызывает событие аудита os.fwalk с аргументами top, topdown, onerror, follow_symlinks,
# dir_fd.
#      Доступность: Юникс.
#      Новое в версии 3.3.
#      Изменено в версии 3.6: принимает объект, подобный пути.
#      Изменено в версии 3.7: Добавлена поддержка байтовых путей.
