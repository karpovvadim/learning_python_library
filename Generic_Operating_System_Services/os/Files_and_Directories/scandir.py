"""os.scandir(path='.')"""
# Возвращает итератор объектов os.DirEntry, соответствующих записям в каталоге,
# указанном путем. Записи выводятся в произвольном порядке, а специальные записи
# '.' и '..' не включены. Если файл удаляется из каталога или добавляется в него после
# создания итератора, не указано, будет ли включена запись для этого файла.
# Использование scandir() вместо listdir() может значительно повысить производительность
# кода, которому также требуется информация о типе файла или атрибуте файла,
# поскольку объекты os.DirEntry предоставляют эту информацию, если операционная система
# предоставляет ее при сканировании каталога. Все методы os.DirEntry могут выполнять
# системный вызов, но is_dir() и is_file() обычно требуют системного вызова только для
# символических ссылок; os.DirEntry.stat() всегда требует системного вызова в Unix,
# но требует его только для символических ссылок в Windows.
# path может быть путеподобным объектом. Если путь имеет тип bytes (напрямую или
# косвенно через интерфейс PathLike), тип атрибутов имени и пути каждого os.DirEntry
# будет bytes; во всех остальных случаях они будут иметь тип str.
# Эта функция также может поддерживать указание файлового дескриптора; дескриптор файла
# должен ссылаться на каталог.
#    Вызывает событие аудита os.scandir с путем аргумента
#    (Raises an auditing event os.scandir with argument path).
import os
path = '/'
obj = os.scandir(path)
print('obj: ', type(obj))
print("Files and Directories in '% s':" % path)
for entry in obj:
    if entry.is_dir() or entry.is_file():
        print(entry.name)

obj.close()
print('--------------------------------------------------')
# Итератор scandir() поддерживает протокол менеджера контекста и имеет следующий метод:
"""scandir.close()"""
# Закройте итератор и освободите полученные ресурсы.
# Это вызывается автоматически, когда итератор исчерпан или собран мусор, или когда
# во время итерации возникает ошибка. Однако рекомендуется вызывать его явно или
# использовать оператор with.
#       Новое в версии 3.6.
# В следующем примере показано простое использование scandir() для отображения всех
# файлов (за исключением каталогов) по указанному пути, которые не начинаются с «.».
# Вызов entry.is_file() обычно не делает дополнительных системных вызовов:

path = '/home/vadim/PycharmProjects/learning_python_library/Generic_Operating_System_Services/os/Files_and_Directories/'
with os.scandir(path) as it:
    for entry in it:
        if not entry.name.startswith('.') and entry.is_file():
            print(entry.name)

#    Примечание
# В системах на базе Unix scandir() использует системные функции opendir() и readdir().
# В Windows он использует функции Win32 FindFirstFileW и FindNextFileW.
#    Новое в версии 3.5.
# Новое в версии 3.6: добавлена поддержка протокола менеджера контекста и метода close().
# Если итератор scandir() не исчерпан и не закрыт явным образом, в его деструкторе будет
# выдано ResourceWarning.
#    Функция принимает объект path-like object (подобный пути).
#    Изменено в версии 3.7: Добавлена поддержка файловых дескрипторов в Unix.
