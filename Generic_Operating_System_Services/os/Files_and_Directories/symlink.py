"""os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)"""
# Создайте символическую ссылку, указывающую на src с именем dst.
# В Windows символическая ссылка представляет либо файл, либо каталог и не преобразуется
# в цель динамически. Если цель присутствует, тип символической ссылки будет создан для
# соответствия. В противном случае символическая ссылка будет создана как каталог, если
# target_is_directory имеет значение True, или символическая ссылка на файл (по умолчанию)
# в противном случае. На платформах, отличных от Windows, target_is_directory игнорируется.
#      Эта функция может поддерживать пути относительно дескрипторов каталогов.
#      Примечание
#      В более новых версиях Windows 10 непривилегированные учетные записи могут создавать
#      символические ссылки, если включен режим разработчика. Если режим разработчика
#      недоступен/включен, требуется привилегия SeCreateSymbolicLinkPrivilege или процесс
#      должен запускаться от имени администратора.
#      OSError возникает, когда функция вызывается непривилегированным пользователем.
#
#      Вызывает событие аудита os.symlink с аргументами src, dst, dir_fd.
#      Доступность: Unix, Windows.
#      Эта функция ограничена на Emscripten и WASI, см. Платформы WebAssembly для
#      получения дополнительной информации.
#      Изменено в версии 3.2: Добавлена поддержка символических ссылок Windows 6.0 (Vista).
#      Новое в версии 3.3: добавлен аргумент dir_fd и теперь разрешено использование
#      target_is_directory на платформах, отличных от Windows.
#      Изменено в версии 3.6: принимает объект, подобный пути, для src и dst.
#      Изменено в версии 3.8: добавлена поддержка символических ссылок без
#      повышенных прав в Windows с режимом разработчика.
import os

src_f, dst_f = 'file.txt', 'symlink_file.txt'
fp = open(src_f, 'w')
os.symlink(src_f, dst_f)
print("Symbolic link created successfully")
os.unlink(src_f)
os.unlink(dst_f)
