"""os.eventfd(initval[, flags=os.EFD_CLOEXEC])"""
# Добавлена os.eventfd() — обёртка для соответствующего системного вызова в Linux.
# Создайте и верните дескриптор файла события. Дескрипторы файлов поддерживают
# необработанные read() и write() с размером буфера 8, select(), poll() и т.п.
# См. справочную страницу eventfd(2) для получения дополнительной информации.
# По умолчанию новый дескриптор файла не наследуется.
# initval — начальное значение счетчика событий. Начальное значение должно быть 32-битным
# целым числом без знака. Обратите внимание, что начальное значение ограничено 32-битным
# целым числом без знака, хотя счетчик событий представляет собой 64-битное целое число
# без знака с максимальным значением 2**64-2.
# флаги могут быть созданы из EFD_CLOEXEC, EFD_NONBLOCK и EFD_SEMAPHORE.
# Если указан EFD_SEMAPHORE и счетчик событий не равен нулю, eventfd_read() возвращает 1 и уменьшает счетчик на единицу.
# Если EFD_SEMAPHORE не указан и счетчик событий не равен нулю, eventfd_read() возвращает
# текущее значение счетчика событий и сбрасывает счетчик на ноль.
# Если счетчик событий равен нулю и EFD_NONBLOCK не указан, eventfd_read() блокируется.
# eventfd_write() увеличивает счетчик событий. Блоки записи, если операция записи
# увеличит счетчик до значения, превышающего 2**64-2.
# Доступность: Linux >= 2.6.27 с glibc >= 2.8
# Новое в версии 3.10.

# flags:
"""os.MFD_CLOEXEC"""  # закрыть при выполнении
#      Установите флаг close-on-exec для нового файлового дескриптора eventfd().
#      Доступность: Linux >= 2.6.27
#      Новое в версии 3.10.

"""os.EFD_NONBLOCK"""
# Установите флаг состояния O_NONBLOCK для нового файлового дескриптора eventfd().
#      Доступность: Linux >= 2.6.27
#      Новое в версии 3.10.

"""os.EFD_SEMAPHORE"""
# Предоставьте семафороподобную семантику для чтения из дескриптора файла eventfd().
# При чтении внутренний счетчик уменьшается на единицу.
#      Доступность: Linux >= 2.6.30
#      Новое в версии 3.10.

import os
# semaphore with start value '1' (семафор с начальным значением '1')
fd = os.eventfd(1, os.EFD_SEMAPHORE | os.EFD_CLOEXEC)


def do_work():
    print(type(fd), "fd =", fd)
    print(type(v), "v =", v)


try:
    # acquire semaphore (приобрести семафор)
    v = os.eventfd_read(fd)
    try:
        do_work()
    finally:
        # release semaphore (семафор выпуска)
        os.eventfd_write(fd, v)
finally:
    os.close(fd)

"""os.eventfd_read(fd)"""
# Чтение значения из дескриптора файла eventfd() и возврат 64-битного целого числа без
# знака. Функция не проверяет, является ли fd событием fd().
#      Доступность: Linux >= 2.6.27
#      Новое в версии 3.10.

"""os.eventfd_write(fd, value)"""
# Добавьте значение в файловый дескриптор eventfd(). значение должно быть 64-битным
# целым числом без знака. Функция не проверяет, является ли fd событием fd().
#      Доступность: Linux >= 2.6.27
#      Новое в версии 3.10.
