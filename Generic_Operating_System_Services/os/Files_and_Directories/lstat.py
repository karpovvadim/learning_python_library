"""os.lstat(path, *, dir_fd=None)"""
# Выполните эквивалент системного вызова lstat() по заданному пути. Аналогичен stat(),
# но не переходит по символическим ссылкам. Возвращает объект stat_result.
# На платформах, не поддерживающих символические ссылки, это псевдоним для stat().
# Начиная с Python 3.3, это эквивалентно os.stat(path, dir_fd=dir_fd,
# follow_symlinks=False).
# Эта функция также может поддерживать пути относительно дескрипторов каталогов.
#      Смотрите также: The stat() function.
# Изменено в версии 3.2: Добавлена поддержка символических ссылок Windows 6.0 (Vista).
# Изменено в версии 3.3: Добавлен параметр dir_fd.
# Изменено в версии 3.6: принимает объект, подобный пути.
# Изменено в версии 3.8: в Windows теперь открываются точки повторной обработки,
# которые представляют другой путь (суррогаты имен), включая символические ссылки и
# соединения каталогов. Другие виды точек повторной обработки разрешаются операционной
# системой, как и для stat().

"""os.stat(path, *, dir_fd=None, follow_symlinks=True)"""
# Получить статус файла или дескриптора файла. Выполните эквивалент системного вызова
# stat() по заданному пути. путь может быть указан либо в виде строки, либо в байтах
# — прямо или косвенно через интерфейс PathLike — или в виде дескриптора открытого
# файла. Возвращает объект stat_result.
# Эта функция обычно следует символическим ссылкам; чтобы указать символическую ссылку,
# добавьте аргумент follow_symlinks=False или используйте lstat().
# Эта функция может поддерживать указание дескриптора файла, а не переход по
# символическим ссылкам.
# В Windows передача follow_symlinks=False отключит отслеживание всех точек повторной
# обработки суррогатных имен, включая символические ссылки и соединения каталогов.
# Другие типы точек повторной обработки, которые не похожи на ссылки или за которыми
# операционная система не может следовать, будут открываться напрямую. При переходе по
# цепочке из нескольких ссылок это может привести к тому, что будет возвращена исходная
# ссылка вместо не-ссылки, которая предотвратила полный обход. Чтобы получить результаты
# статистики для конечного пути в этом случае, используйте функцию os.path.realpath()
# для разрешения имени пути, насколько это возможно, и вызовите lstat() для результата.
# Это не относится к оборванным символическим ссылкам или точкам соединения, которые
# вызывают обычные исключения.
# Новое в версии 3.3: добавлены аргументы dir_fd и follow_symlinks, указывающие
# файловый дескриптор вместо пути.
# Изменено в версии 3.6: принимает объект, подобный пути.
# Изменено в версии 3.8: в Windows теперь отслеживаются все точки повторной обработки,
# которые могут быть разрешены операционной системой, а передача follow_symlinks=False
# отключает отслеживание всех суррогатных точек повторной обработки имени. Если
# операционная система достигает точки повторной обработки, за которой она не может
# следовать, stat теперь возвращает информацию об исходном пути, как если бы было
# указано follow_symlinks=False, а не вызывающее ошибку.

import os
path = 'tt.txt'
# Get the status of the specified path
status = os.stat(path)
# Print the status
# of the specified path
print(status)
