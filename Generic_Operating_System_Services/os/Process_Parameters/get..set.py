# Функции, представленные ниже дают возможность манипулировать с uid, gid и pid
# процесса. Чаще всего они используются авторами демонов или специальных системных
# программ, которым необходимо изменять уровень разрешений, а не запускаться от
# имени пользователя root. В конце раздела представлены некоторые примеры.
import os
import pwd

"""os.getegid()"""
# Возвращает эффективный идентификатор группы текущего процесса. Это соответствует
# биту «set id» в файле, который выполняется в текущем процессе.
#       Доступность: Unix, не Emscripten, не WASI.

"""os.setegid(egid)"""
# Устанавливает эффективный идентификатор группы текущего процесса.
# Доступность: Unix, не Emscripten, не WASI.
os.setegid(1000)
print("egid:", os.getegid())

"""os.geteuid()"""
# Возвращает эффективный идентификатор пользователя текущего процесса.
#      Доступность: Unix, не Emscripten, не WASI.

""" os.seteuid(euid)"""
# Устанавливает эффективный идентификатор пользователя текущего процесса.
os.seteuid(1000)
print("euid:", os.geteuid())

""" os.getgid()"""
# Return the real group id of the current process.
# Availability: Unix.

""" os.setgid(gid)"""
# Устанавливает идентификатор группы текущего процесса.
os.setgid(1000)
print("gid:", os.getgid())

"""os.getgroups()"""
# Возвращает список дополнительных идентификаторов групп, связанных с текущим
# процессом.
#      Доступность: Unix, не Emscripten, не WASI.
#      Примечание
# В macOS поведение getgroups() несколько отличается от других платформ Unix.
# Если интерпретатор Python был создан с целью развертывания версии 10.5 или более
# ранней, getgroups() возвращает список действующих идентификаторов групп, связанных
# с текущим пользовательским процессом; этот список ограничен определенным системой
# числом записей, обычно 16, и может быть изменен вызовами setgroups() при наличии
# соответствующих привилегий. Если цель развертывания выше 10,5, getgroups()
# возвращает текущий список доступа к группе для пользователя, связанного с
# эффективным идентификатором пользователя процесса; список группового доступа
# может меняться в течение времени жизни процесса, на него не влияют вызовы
# setgroups(), и его длина не ограничена 16. Целевое значение развертывания,
# MACOSX_DEPLOYMENT_TARGET, можно получить с помощью sysconfig.get_config_var().

"""os.setgroups(groups)"""
# Устанавливает список дополнительных идентификаторов групп groups, связанных с текущим
# процессом. Группы groups должны быть последовательностью и каждый элемент должен быть
# целым числом, идентифицирующим группу. Эта операция обычно доступна только
# суперпользователю.

print("os.getgroups():                 ", os.getgroups())
new_sgid = [4, 24, 27, 30, 46, 115, 135, 136, 1000]
# os.setgroups(new_sgid)   # PermissionError: [Errno 1] Операция не разрешена
# print(os.getgroups())

"""os.getgrouplist(user, group)"""
# Возвращает список идентификаторов групп, к которым принадлежит пользователь.
# Если группы нет в списке, она включается; обычно группа указывается как поле
# идентификатора группы из записи пароля для пользователя, поскольку в противном
# случае этот идентификатор группы может быть опущен.
#       Доступность: Unix, не Emscripten, не WASI.
#       Новое в версии 3.3.
print("os.getgrouplist(user, group):", os.getgrouplist('vadim', 3))

"""os.getlogin()"""
# Возвращает имя пользователя, вошедшего в систему на управляющем терминале процесса.
# В большинстве случаев полезнее использовать getpass.getuser(), так как последний
# проверяет переменные среды LOGNAME или USERNAME, чтобы узнать, кто является
# пользователем, и возвращается к pwd.getpwuid(os.getuid())[0] чтобы получить
# логин текущего реального идентификатора пользователя.
#      Доступность: Unix, Windows, не Emscripten, не WASI.
os.getlogin = lambda: pwd.getpwuid(os.getuid())[0]
print("os.getlogin = lambda: pwd.getpwuid(os.getuid())[0]:", os.getlogin())
print("pwd.getpwuid(os.getuid())[0]:                      ", pwd.getpwuid(os.getuid())[0])
print("pwd.getpwuid(os.getuid())[5]:                      ", pwd.getpwuid(os.getuid())[5])

"""os.getuid()"""
# Возвращает реальный идентификатор пользователя текущего процесса.
# Доступность: Юникс.
print("os.getuid():", os.getuid())

"""os.getresuid()"""
# Возвращает кортеж (ruid, euid, suid), обозначающий реальный, эффективный и
# сохраненный идентификатор пользователя текущего процесса.
# Доступность: Unix, не Emscripten, не WASI.
print("os.getresuid():", os.getresuid())

"""os.getresgid()"""
# Возвращает кортеж (rgid, egid, sgid), обозначающий реальный, эффективный и
# сохраненный идентификатор группы текущего процесса.
print("os.getresgid():", os.getresgid())

"""os.getpgid(pid)"""
# Возвращает идентификатор группы процессов процесса с идентификатором pid процесса.
# Если pid равен 0, возвращается идентификатор группы процессов текущего процесса.
#       Доступность: Unix, не Emscripten, не WASI.
print("os.getpgid(0):", os.getpgid(0))

"""os.getpgrp()"""
# Функции os.getpgrp() возвращает идентификатор текущей группы процессов.
print("os.getpgrp():", os.getpgrp())

"""os.getpid()"""
# Вернуть текущий идентификатор процесса.
print("os.getpid():", os.getpid())

"""os.getppid()"""
# Возвращает идентификатор родительского процесса. Когда родительский процесс
# завершился, в Unix возвращаемый идентификатор является идентификатором процесса
# инициализации (1), в Windows это все тот же идентификатор, который может быть уже
# повторно использован другим процессом.
# Доступность: Unix, Windows, не Emscripten, не WASI.
# Изменено в версии 3.2: Добавлена поддержка Windows.
print("os.getppid():", os.getppid())
