"""
os.spawnl(mode, path, ...)          spawn - порождать
os.spawnle(mode, path, ..., env)
os.spawnlp(mode, file, ...)
os.spawnlpe(mode, file, ..., env)
os.spawnv(mode, path, args)
os.spawnve(mode, path, args, env)
os.spawnvp(mode, file, args)
os.spawnvpe(mode, file, args, env)
"""
#    Выполнить путь к программе в новом процессе.
#    (Обратите внимание, что модуль подпроцесса предоставляет более мощные средства для
# создания новых процессов и получения их результатов; использование этого модуля
# предпочтительнее, чем использование этих функций. Обратите особое внимание на раздел
# Замена старых функций модулем подпроцесса.)
#    Если режим P_NOWAIT, эта функция возвращает идентификатор нового процесса; если
# режим P_WAIT, возвращает код завершения процесса, если он завершается нормально,
# или -signal, где сигнал — это сигнал, который убил процесс. В Windows идентификатор
# процесса фактически будет дескриптором процесса, поэтому его можно использовать с
# функцией waitpid().
#    Обратите внимание, что в VxWorks эта функция не возвращает -signal, когда
# новый процесс уничтожается. Вместо этого он вызывает исключение OSError.
#    Варианты «l» и «v» функций spawn* отличаются тем, как передаются аргументы командной
# строки. С вариантами «l», пожалуй, проще всего работать, если количество параметров
# фиксировано при написании кода; отдельные параметры просто становятся дополнительными
# параметрами функций spawnl*(). Варианты «v» хороши, когда количество параметров является
# переменным, а аргументы передаются в виде списка или кортежа в качестве параметра args.
# В любом случае аргументы дочернего процесса должны начинаться с имени выполняемой
# команды.
#    Варианты, которые включают вторую букву «p» в конце (spawnlp(), spawnlpe(),
# spawnvp() и spawnvpe()), будут использовать переменную среды PATH для поиска файла
# программы. Когда среда заменяется (с использованием одного из вариантов spawn*e,
# обсуждаемых в следующем абзаце), новая среда используется как источник переменной PATH.
# Другие варианты, spawnl(), spawnle(), spawnv() и spawnve(), не будут использовать
# переменную PATH для поиска исполняемого файла; path должен содержать соответствующий
# абсолютный или относительный путь.
#    Для spawnle(), spawnlpe(), spawnve() и spawnvpe() (обратите внимание, что все они
# оканчиваются на «e») параметр env должен быть отображением, которое используется для
# определения переменных среды для нового процесса (они используются вместо среды
# текущего процесса); функции spawnl(), spawnlp(), spawnv() и spawnvp() заставляют новый
# процесс наследовать среду текущего процесса. Обратите внимание, что ключи и значения
# в словаре env должны быть строками; неверные ключи или значения приведут к сбою
# функции с возвращаемым значением 127.
#      Например, следующие вызовы spawnlp() и spawnvpe() эквивалентны:

import os
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')

L = ['cp', 'index.html', '/dev/null']
os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)

#      Вызывает событие аудита os.spawn с параметрами mode, path, args, env.
#      Доступность: Unix, Windows, не Emscripten, не WASI.
#      spawnlp(), spawnlpe(), spawnvp() и spawnvpe() недоступны в Windows. spawnle() и
# spawnve() не являются потокобезопасными в Windows; вместо этого мы советуем вам
# использовать модуль подпроцесса.
#      Изменено в версии 3.6: принимает объект, подобный пути.
"""
os.P_NOWAIT
os.P_NOWAITO
"""
#      Возможные значения параметра режима для семейства функций spawn*. Если задано
# любое из этих значений, функции spawn*() вернутся, как только новый процесс будет
# создан, с идентификатором процесса в качестве возвращаемого значения.
#      Доступность: Unix, Windows.

""" os.P_WAIT"""
#      Возможное значение параметра режима для семейства функций spawn*. Если это задано
# как режим, функции spawn*() не вернутся, пока новый процесс не завершится, и вернут код
# завершения процесса, запуск которого успешен, или -signal, если сигнал убивает процесс.
#      Доступность: Unix, Windows.

"""
os.P_DETACH
os.P_OVERLAY
"""
#      Возможные значения параметра режима для семейства функций spawn*. Они менее
# портативны, чем перечисленные выше. P_DETACH похож на P_NOWAIT, но новый процесс
# отсоединяется от консоли вызывающего процесса. Если используется P_OVERLAY,
# текущий процесс будет заменен; функция spawn* не вернется.
#      Доступность: Windows.
