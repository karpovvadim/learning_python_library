"""os.fork()"""  # разветвление, вилка
# Разветвите дочерний процесс. Возвращает 0 в дочернем и идентификатор дочернего процесса
# в родительском. При возникновении ошибки возникает ошибка OSError.
# Обратите внимание, что некоторые платформы, включая FreeBSD <= 6.3 и Cygwin, имеют
# известные проблемы при использовании fork() из потока.
#      Вызывает событие аудита os.fork без аргументов.
#      Изменено в версии 3.8: Вызов fork() в субинтерпретаторе больше не поддерживается (возникает RuntimeError).
#      Предупреждение
#      См. ssl для приложений, использующих модуль SSL с fork().
#      Доступность: Unix, не Emscripten, не WASI.
import os
pid = os.fork()  # Создайте дочерний процесс, используя метод os.fork()
if pid > 0:
    print("I am parent process:")
    print("Process ID:", os.getpid())
    print("Child's process ID:", pid)
# pid, равный 0, представляет созданный дочерний процесс
else:
    print("\nI am child process:")
    print("Process ID:", os.getpid())
    print("Parent's process ID:", os.getppid())
# Если при использовании метода os.fork() возникла какая-либо ошибка,
# OSError будет поднят.


"""os.forkpty()"""
# Разветвите дочерний процесс, используя новый псевдотерминал в качестве управляющего
# терминалом дочернего процесса. Возвращает пару (pid, fd), где pid равен 0 в дочернем
# процессе, идентификатор нового дочернего процесса в родительском, а
# fd — файловый дескриптор главного конца псевдотерминала. Для более переносимого подхода
# используйте модуль pty. При возникновении ошибки возникает ошибка OSError.
#      Вызывает событие аудита os.forkpty без аргументов.
#      Изменено в версии 3.8: Вызов forkpty() в субинтерпретаторе больше не поддерживается (возникает RuntimeError).
#      Доступность: Unix, не Emscripten, не WASI.
print('----------1-------------------------------------------------------')
result = []
pid_and_fd = os.forkpty()  # Создайте дочерний процесс, используя метод os.forkpty()
result.append(pid_and_fd)
print('------------2----------------------------------------------------------')
print(pid_and_fd)
