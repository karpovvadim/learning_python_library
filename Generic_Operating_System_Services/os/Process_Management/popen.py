"""os.popen(cmd, mode='r', buffering=- 1)"""
# Откройте канал к или от команды cmd. Возвращаемое значение представляет собой открытый
# файловый объект, подключенный к каналу, который может быть прочитан или записан в
# зависимости от того, установлен ли режим «r» (по умолчанию) или «w». Аргумент
# буферизации имеет то же значение, что и соответствующий аргумент встроенной функции
# open(). Возвращенный файловый объект читает или записывает текстовые строки, а не байты.
# Метод close возвращает None, если подпроцесс завершился успешно, или код возврата
# подпроцесса, если произошла ошибка. В системах POSIX, если код возврата положительный,
# он представляет собой возвращаемое значение процесса, сдвинутое влево на один байт.
# Если код возврата отрицательный, процесс был завершен сигналом, заданным
# инвертированным значением кода возврата. (Например, возвращаемое значение может быть
# - signal.SIGKILL, если подпроцесс был уничтожен.) В системах Windows возвращаемое
# значение содержит целочисленный код возврата из дочернего процесса.
# В Unix можно использовать функцию waitstatus_to_exitcode() для преобразования результата
# метода закрытия (статуса выхода) в код выхода, если он не равен None. В Windows
# результатом метода close является непосредственно код выхода (или None).
# Это реализовано с помощью subprocess.Popen; см. документацию этого класса для более
# эффективных способов управления и взаимодействия с подпроцессами.
#      Наличие: не Emscripten, не WASI.
#      Примечание
# Режим Python UTF-8 влияет на кодировку, используемую для содержимого cmd и канала.
# popen() — это простая оболочка для subprocess.Popen. Используйте subprocess.Popen
# или subprocess.run() для управления такими параметрами как кодировки.

import os
# указывайте полный путь к запускаемой
# программе/команде или она не будет работать
# листинг каталога 'ls -l'
cmd = '/bin/ls -l'
output = os.popen(cmd, 'r')
for line in output:
    print(line, end='')
