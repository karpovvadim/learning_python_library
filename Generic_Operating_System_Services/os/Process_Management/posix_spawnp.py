"""                         spawn - порождать
os.posix_spawn(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False,
setsid=False, setsigmask=(), setsigdef=(), scheduler=None)
"""
# Обертывает API-интерфейс библиотеки C posix_spawn() для использования из Python.
# Большинству пользователей следует использовать subprocess.run() вместо posix_spawn().
# Путь, args и env только для позиционных аргументов аналогичны execve().
# Параметр path — это путь к исполняемому файлу. Путь должен содержать каталог.
# Используйте posix_spawnp() для передачи исполняемого файла без каталога.
# Аргумент file_actions может быть последовательностью кортежей, описывающих действия,
# которые необходимо выполнить над определенными файловыми дескрипторами в дочернем
# процессе между шагами fork() и exec() реализации библиотеки C. Первый элемент в каждом
# кортеже должен быть одним из трех индикаторов типа, перечисленных ниже, описывающих
# остальные элементы кортежа:
"""
os.POSIX_SPAWN_OPEN
    (os.POSIX_SPAWN_OPEN, fd, path, flags, mode)
    Performs (Выполняет) os.dup2(os.open(path, flags, mode), fd).

os.POSIX_SPAWN_CLOSE
    (os.POSIX_SPAWN_CLOSE, fd)
    Performs os.close(fd).

os.POSIX_SPAWN_DUP2
    (os.POSIX_SPAWN_DUP2, fd, new_fd)
    Performs os.dup2(fd, new_fd).
"""
# Эти кортежи соответствуют вызовам API posix_spawn_file_actions_addopen(),
# posix_spawn_file_actions_addclose() и posix_spawn_file_actions_adddup2() библиотеки C,
# которые используются для подготовки к самому вызову posix_spawn().
# Аргумент setpgroup установит группу процессов дочернего элемента в указанное значение.
# Если указанное значение равно 0, идентификатор группы дочерних процессов будет таким же,
# как и его идентификатор процесса. Если значение setpgroup не установлено, дочерний
# процесс унаследует идентификатор родительской группы процессов. Этот аргумент
# соответствует флагу POSIX_SPAWN_SETPGROUP библиотеки C.
# Если аргумент resetids равен True, эффективный UID и GID дочернего процесса будут
# сброшены на реальные UID и GID родительского процесса. Если аргумент равен False,
# то дочерний элемент сохраняет эффективный UID и GID родителя. В любом случае, если
# биты разрешений set-user-ID и set-group-ID включены в исполняемом файле, их действие
# переопределит настройку действующих UID и GID. Этот аргумент соответствует флагу
# POSIX_SPAWN_RESETIDS библиотеки C.
# Если аргумент setsid равен True, будет создан новый идентификатор сеанса для
# posix_spawn. Для settingsid требуется флаг POSIX_SPAWN_SETSID или POSIX_SPAWN_SETSID_NP.
# В противном случае возникает NotImplementedError.
# Аргумент setigmask установит маску сигнала на указанный набор сигналов. Если параметр
# не используется, то потомок наследует маску сигнала родителя. Этот аргумент
# соответствует флагу POSIX_SPAWN_SETSIGMASK библиотеки C.
# Аргумент sigdef сбросит расположение всех сигналов в указанном наборе. Этот аргумент
# соответствует флагу POSIX_SPAWN_SETSIGDEF библиотеки C.
# Аргумент планировщика должен быть кортежем, содержащим (необязательную) политику
# планировщика и экземпляр sched_param с параметрами планировщика. Значение None вместо
# политики планировщика указывает, что она не предоставляется. Этот аргумент представляет
# собой комбинацию флагов POSIX_SPAWN_SETSCHEDPARAM и POSIX_SPAWN_SETSCHEDULER
# библиотеки C.
# Вызывает событие аудита os.posix_spawn с аргументами path, argv, env.
# Новое в версии 3.8.
# Доступность: Unix, не Emscripten, не WASI.

"""
os.posix_spawnp(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False,
                setsid=False, setsigmask=(), setsigdef=(), scheduler=None)
"""
# Обертывает API-интерфейс библиотеки C posix_spawnp() для использования из Python.
# Аналогичен posix_spawn(), за исключением того, что система ищет исполняемый файл в
# списке каталогов, указанном в переменной окружения PATH (так же, как и для execvp(3)).
# Вызывает событие аудита os.posix_spawn с аргументами path, argv, env.
# Новое в версии 3.8.
# Доступность: POSIX, не Emscripten, не WASI.
# См. документацию по posix_spawn().
