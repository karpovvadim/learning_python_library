"""
os.execl(path, arg0, arg1, ...)
os.execle(path, arg0, arg1, ..., env)
os.execlp(file, arg0, arg1, ...)
os.execlpe(file, arg0, arg1, ..., env)
os.execv(path, args)
os.execve(path, args, env)
os.execvp(file, args)
os.execvpe(file, args, env
"""
# Все эти функции выполняют новую программу, заменяя текущий процесс; они не возвращаются.
# В Unix новый исполняемый файл загружается в текущий процесс и будет иметь тот же
# идентификатор процесса, что и вызывающий. Об ошибках будет сообщаться как об исключениях
# OSError.
# Текущий процесс немедленно заменяется. Открытые файловые объекты и дескрипторы
# не сбрасываются поэтому если в этих открытых файлах могут быть данные, буферизованные,
# вы должны сбросить их с помощью sys.stdout.flush() или os.fsync() перед вызовом функции
# exec*.
# Варианты «l» и «v» функций exec* отличаются тем, как передаются аргументы командной
# строки. С вариантами «l», пожалуй, проще всего работать, если количество параметров
# фиксировано при написании кода; отдельные параметры просто становятся дополнительными
# параметрами функций execl*(). Варианты «v» хороши, когда количество параметров является
# переменным, а аргументы передаются в виде списка или кортежа в качестве параметра
# args. В любом случае аргументы дочернего процесса должны начинаться с имени
# выполняемой команды, но это не обязательно.
# Варианты, которые включают «p» в конце (execlp(), execlpe(), execvp() и execvpe()),
# будут использовать переменную среды PATH для поиска файла программы. При замене среды
# (с использованием одного из вариантов exec*e, обсуждаемых в следующем абзаце) новая
# среда используется как источник переменной PATH. Другие варианты, execl(), execle(),
# execv() и execve(), не будут использовать переменную PATH для поиска исполняемого
# файла; path должен содержать соответствующий абсолютный или относительный путь.
# Для execle(), execlpe(), execve() и execvpe() (обратите внимание, что все они
# заканчиваются на «e») параметр env должен быть отображением, которое используется для
# определения переменных среды для нового процесса (эти используются вместо среды текущего
# процесса); функции execl(), execlp(), execv() и execvp() заставляют новый процесс
# наследовать среду текущего процесса.
# Для execve() на некоторых платформах путь также может быть указан как дескриптор
# открытого файла. Эта функция может не поддерживаться на вашей платформе; вы можете
# проверить, доступен ли он, используя os.supports_fd. Если он недоступен, его
# использование вызовет NotImplementedError.
#      Вызывает событие аудита os.exec с аргументами path, args, env.
#      Доступность: Unix, Windows, не Emscripten, не WASI.
#      Новое в версии 3.3: добавлена поддержка указания пути в качестве дескриптора
#      открытого файла для execve().
#      Изменено в версии 3.6: принимает объект, подобный пути.
