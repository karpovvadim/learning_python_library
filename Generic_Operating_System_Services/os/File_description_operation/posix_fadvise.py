"""os.posix_fadvise(fd, offset, len, advice)"""
# Объявляет о намерении получить доступ к данным по определенному шаблону, что позволяет
# ядру выполнить оптимизацию. advice относится к области файла, указанной параметром fd,
# начиная со смещения (offset) и продолжая len байт.
# advice является одним из POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL, POSIX_FADV_RANDOM,
# POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED или POSIX_FADV_DONTNEED.
#      Доступность: Юникс.
#      Новое в версии 3.3.
""" 
os.POSIX_FADV_NORMAL - это демонстрирует, что, возможно, программа, похоже, не может
                       предложить никаких советов относительно своего формата доступа к
                       информации. Это стандартное предположение, если для открытого 
                       файла не дается никаких указаний.
os.POSIX_FADV_SEQUENTIAL - программа предполагает одновременный доступ к требуемой 
                        информации (с нижними смещениями, считанными заранее верхними).
os.POSIX_FADV_RANDOM - случайным образом будет получена необходимая информация.
os.POSIX_FADV_NOREUSE - только один раз можно получить указанные данные.
os.POSIX_FADV_WILLNEED - Как и в ближайшем будущем, определенная информация будет собрана.
os.POSIX_FADV_DONTNEED - В ближайшем будущем перечисленная информация будет недоступна.
"""
# Флаги, которые можно использовать в рекомендациях в posix_fadvise(), которые определяют
# шаблон доступа, который, вероятно, будет использоваться.
#      Доступность: Юникс.
#      Новое в версии 3.3.
import os
fd = os.open("foo.txt", os.O_RDWR | os.O_CREAT)
os.posix_fadvise(fd, 0, 0, os.POSIX_FADV_DONTNEED)

"""
Открыт редактор GNU Nano4.8; напишем в нем скрипт C. Во-первых, мы определили некоторые 
библиотеки, например, fcntl и unistd. Эти библиотеки необходимы, потому что без этого кода;
это не сработает. Затем мы указали основную функцию с двумя параметрами. Один из них
представляет собой целочисленный тип, а другой — массив символьных типов. В этом вызове
метода main () определено целое число «fd», которое будет использоваться в качестве 
дескриптора. Системный вызов open использовался для открытия содержимого массива 
относительно его индекса «1». Он прочитает содержимое и вернет его к целочисленному 
файловому дескриптору «fd». Теперь важный шаг здесь. Мы свяжем этот файловый дескриптор 
«fd» с ядром с помощью функции «fdatasync», передав этот дескриптор «fd» в качестве 
аргумента. Итак, мы использовали системный вызов posix_fadvise с «fd» в качестве первого 
параметра. Мы определили начальное смещение как 0, а длина поля указана как 0. Затем 
мы использовали POSIX_FADV_DONTNEED как параметр совета. Совет, который мы ищем, называется
POSIX_FADV_DONTNEED. Он сообщает операционной системе, что запрошенные байты больше не 
потребуются. В результате всего этого байты будут выдаваться из системного буфера 
документа. Сопутствующая мини-программа инструктирует ОС очистить буфер от всей 
информации, объединенной с определенным файлом. Наконец, системный вызов close будет 
использован для закрытия файлового дескриптора «fd», и основная функция будет завершена.
Нажмите «Ctrl + S», чтобы сохранить код, и «Ctrl + X», чтобы оставить файл. Совет, 
который мы ищем, называется POSIX_FADV_DONTNEED. Он сообщает операционной системе, что 
запрошенные байты больше не потребуются. В результате всего этого байты будут выдаваться 
из системного буфера документа. Сопровождающая мини-программа инструктирует ОС очистить 
буфер от всей информации, объединенной с определенным файлом. Наконец, системный вызов 
close будет использован для закрытия файлового дескриптора «fd», и основная функция будет 
завершена. Нажмите «Ctrl + S», чтобы сохранить код, и «Ctrl + X», чтобы оставить файл. 
Совет, который мы ищем, называется POSIX_FADV_DONTNEED. Он сообщает операционной системе, 
что запрошенные байты больше не потребуются. В результате всего этого байты будут 
выдаваться из системного буфера документа. Сопутствующая мини-программа инструктирует
ОС очистить буфер от всей информации, объединенной с определенным файлом. Наконец, 
системный вызов close будет использован для закрытия файлового дескриптора «fd», и 
основная функция будет завершена. Нажмите «Ctrl + S», чтобы сохранить код, и «Ctrl + X», 
чтобы оставить файл. Наконец, системный вызов close будет использован для закрытия 
файлового дескриптора «fd», и основная функция будет завершена. Нажмите «Ctrl + S», 
чтобы сохранить код, и «Ctrl + X», чтобы оставить файл. Наконец, системный вызов close 
будет использован для закрытия файлового дескриптора «fd», и основная функция будет 
завершена. Нажмите «Ctrl + S», чтобы сохранить код, и «Ctrl + X», чтобы оставить файл.
"""
