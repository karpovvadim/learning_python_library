"""
Runner context manager (Менеджер контекста бегуна)

class asyncio.Runner(*, debug=None, loop_factory=None)

    Менеджер контекста, который упрощает несколько вызовов асинхронных функций в одном
контексте.
    Иногда в одном event loop (цикле событий) и contextvars.Context (контекстные
переменные) следует вызывать несколько асинхронных функций верхнего уровня.
    Если параметр debug=True, цикл событий будет выполняться в режиме отладки.
Значение False явно отключает режим отладки. None используется для соблюдения глобальных
настроек режима отладки.
    Loop_factory можно использовать для переопределения создания цикла. За установку
созданного цикла в качестве текущего отвечает Loop_factory. По умолчанию используется
asyncio.new_event_loop() и устанавливается как текущий цикл событий с помощью
asyncio.set_event_loop(), если для loop_factory установлено значение None.
    По сути, пример asyncio.run() можно переписать с использованием бегуна:
"""
import asyncio


async def main():
    await asyncio.sleep(1)
    print('hello')

with asyncio.Runner() as runner:
    runner.run(main())
    print(runner.get_loop())
"""
New in version 3.11.

Методы менеджера контекста Runner.

Runner.run(coro, *, context=None):

Метод Runner.run() запускает сопрограмму coro во встроенном цикле. Возвращает результат
сопрограммы или вызывает ее исключение.

Необязательный ключевой аргумент context, позволяет указать пользовательский
contextvars.Context для запуска сопрограммы. Если context=None, то по умолчанию 
используется контекст Runner.

Эта функция не может быть вызвана, когда в том же потоке выполняется другой цикл 
обработки событий asyncio.

Runner.close():

Метод Runner.close() закрывает менеджера контекста Runner.

Завершает работу асинхронных генераторов, завершает работу исполнителя по умолчанию, 
закрывает цикл обработки событий и освобождает встроенные переменные contextvars.Context.

Runner.get_loop():

Метод Runner.get_loop() Вернуть цикл обработки событий, связанный с экземпляром бегуна.

    Примечание. Runner использует стратегию ленивой инициализации, его конструктор не 
    инициализирует нижележащие низкоуровневые структуры.
    Встроенный цикл событий loop и контекст context создаются при входе в with или при
    первом вызове Runner.run() или Runner.get_loop().
"""

