"""
Creating Tasks (Создание задач)

Исходный код: Lib/asyncio/tasks.py.

asyncio.create_task(coro, *, name=None, context=None) (coro = coroutine)
     coro - асинхронная функция coroutine,
     name=None - имя задачи.
     context=None - пользовательский contextvars.Context для запуска сопрограммы.

     Оберните сопрограмму coro в Task и запланируйте ее выполнение. Верните объект Task.

     Если имя не равно None, оно устанавливается как имя задачи с помощью Task.set_name().

     Необязательный аргумент контекста, содержащий только ключевые слова, позволяет
     указать собственный contextvars.Context для запуска сопрограммы. Текущая копия
     контекста создается, когда контекст не указан.

     Задача выполняется в цикле, возвращаемом функцией get_running_loop().
     RuntimeError возникает, если в текущем потоке нет работающего цикла.

     Примечание: asyncio.TaskGroup.create_task() — это новая альтернатива, позволяющая
     удобно ожидать выполнения группы связанных задач.

     Важно: Сохраните ссылку на результат этой функции, чтобы избежать исчезновения
     задачи в середине выполнения. Цикл событий сохраняет только слабые ссылки на задачи.
     Задача, на которую нигде нет ссылок, может быть подвергнута сборке мусора в любой
     момент, даже до того, как она будет выполнена. Для надежных фоновых задач по
     принципу «выстрелил и забыл» соберите их в коллекцию:
"""
import asyncio

background_tasks = set()


async def some_coro(param):  # nested - вложенный
    return 36


async def main():
    for i in range(3):
        task = asyncio.create_task(some_coro(param=3))

        # Добавляем задачу в набор. Это создает сильную ссылку.
        background_tasks.add(task)
        print("\n", background_tasks)
        # Чтобы предотвратить вечное сохранение ссылок на завершенные задачи,
        # заставить каждую задачу удалять свою ссылку из набора после
        # завершение:
        task.add_done_callback(background_tasks.discard)


asyncio.run(main())
