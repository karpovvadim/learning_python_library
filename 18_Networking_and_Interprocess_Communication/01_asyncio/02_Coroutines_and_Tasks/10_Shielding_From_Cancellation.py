"""
Shielding From Cancellation (Защита от отмены)

awaitable asyncio.shield(aw)
ожидаемый асинхронный щит (aw)

     Защитите ожидаемый объект от отмены.
Если aw является сопрограммой, она автоматически назначается как Задача.

     Заявление:"""

""" task = asyncio.create_task(something())
res = await shield(task) """

"эквивалентно:"

""" res = await something() """

"""
за исключением того, что если сопрограмма, содержащая ее, отменена, Задача, выполняемая в
Something(), не отменяется. С точки зрения чего-то() отмены не произошло. Хотя вызывающий
объект по-прежнему отменяется, выражение await по-прежнему вызывает CancelledError.
Если что-то() отменяется другими способами (т.е. изнутри самого себя), это также отменит
и щит().
Если желательно полностью игнорировать отмену (не рекомендуется), функцию Shield() следует
объединить с предложением try/Exception следующим образом:"""

from asyncio import CancelledError, shield
import asyncio


async def something(x):
    return x ** 3


async def main():
    task = asyncio.create_task(something(5))
    try:
        res = await shield(task)
        print(res)
    except CancelledError:
        res = None


asyncio.run(main())
"""
Важнo: Сохраните ссылку на задачи, переданные в эту функцию, чтобы задача не исчезла в
середине выполнения. Цикл событий сохраняет только слабые ссылки на задачи. Задача, на
которую нигде нет ссылок, может быть подвергнута сборке мусора в любой момент, даже до
того, как она будет выполнена.
Изменено в версии 3.10: Убран параметр цикла.
Устарело с версии 3.10: предупреждение об устаревании выдается, если aw не является
объектом типа Future и нет текущего цикла событий.
"""
