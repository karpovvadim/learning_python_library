"""class bytes(source=b'')"""
"""class bytes(source, encoding)"""
"""class bytes(source, encoding, errors)"""
# Возвращает новый объект «bytes», который представляет собой
# неизменяемую последовательность целых чисел в диапазоне 0 <= x < 256.
# bytes — это неизменяемая версия bytearray — она имеет те же неизменяющие методы и
# такое же поведение при индексации и нарезке.
# Соответственно, аргументы конструктора интерпретируются как для bytearray().
# Объекты Bytes также можно создавать с помощью литералов, см. литералы String и Bytes.
# См. также Типы двоичных последовательностей — bytes, bytearray, memoryview,
# Bytes Objects и Bytes and Bytearray Operations.
# , получающиеся применением функции chr.
#  Возвращает строку, представляющую символ, кодовая точка Unicode которого является
#  целым числом i.

print("----- class bytes(source, encoding, errors)-----------------")
print(0, b"bytes")   #   байтовая строка
print(1.0, "Байты".encode("utf-8"))    #   кодировать
print(1.1, "bytes".encode("utf-8"))
print(2.0, bytes("bytes", encoding="utf-8"))   #  utf-8 кодирование только кирилицы
print(2.1, bytes("Байты", encoding="utf-8"))
print(3.0, bytes([50, 100, 76, 72, 41]))
print(" b'bytes':", b'\xd0\x91\xd0\xb0\xd0\xb9\xd1\x82\xd1\x8b'.decode('utf-8'))
print("---1-----chr(i)----------------------------------------------------------")
print(chr(100), "= chr(100)", chr(41), "= chr(41)", chr(72), "= chr(72)",
      chr(8364), "= chr(8364)", chr(104), "= chr(104)")

# Учитывая строку, представляющую один символ Unicode,
# вернуть целое число, представляющее кодовую точку Unicode этого символа.
# Например, ord('€') (знак евро) возвращает 8364.
print("---2-----ord(c)--------------------------------------------------")
print("ord('a'), ord('$'), ord('w'):  ", ord('a'), ord('$'), ord('w'))
# class bytearray(source=b'')
# class bytearray(source, encoding)
# class bytearray(source, encoding, errors)

print("---3----class Bytearray--------------------------------------")
b = bytearray(b'hello world!')  #  Bytearray в python - массив байт.
# От типа bytes отличается только тем, что является изменяемым.
b_2 = bytearray([50, 100, 76, 72, 41])
print(0, b, b_2)
print(1, b[0])   #   преобразование ord(c).

b[0] = 105
print(2, b)
for i in range(len(b)):
    b[i] += i
print(3, b)

print("----4-----callable(object)--------------------------------")
print(callable(b))  #  Возвратит True, если объектный аргумент кажется вызываемым, False, если нет.
# Если это возвращает True, все еще возможно, что вызов завершится ошибкой, но если это False,
# вызов объекта никогда не будет успешным. Обратите внимание, что классы можно вызывать (вызов класса
# возвращает новый экземпляр); экземпляры можно вызывать, если их класс имеет метод __call__().
print(callable('abc'))  #  Новое в версии 3.2: эта функция была сначала удалена
# в Python 3.0, а затем возвращена в Python 3.2.
