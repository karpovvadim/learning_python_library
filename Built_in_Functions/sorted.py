"""sorted(iterable, /, *, key=None, reverse=False)"""
# Вернуть новый отсортированный список из элементов в iterable.
# Имеет два необязательных аргумента, которые должны быть указаны как аргументы
# ключевого слова.
# 1. key указывает функцию одного аргумента, которая используется для извлечения ключа
# сравнения из каждого элемента в итерируемом объекте (например, key=str.lower).
# Значение по умолчанию — None (непосредственное сравнение элементов).
# 2. reverse является логическим значением. Если установлено значение True, элементы списка сортируются так, как если бы каждое сравнение было обратным.
# Используйте functools.cmp_to_key(), чтобы преобразовать функцию cmp старого стиля
# в ключевую функцию.
# Встроенная функция sorted() гарантированно стабильна. Сортировка является
# стабильной, если она гарантирует неизменный относительный порядок элементов,
# которые сравниваются равными — это полезно для сортировки в несколько проходов
# (например, сортировка по отделам, а затем по уровням заработной платы).
# Алгоритм сортировки использует только <сравнения между элементами. Хотя
# определения метода __lt__() будет достаточно для сортировки, PEP 8 рекомендует
# реализовать все шесть расширенных сравнений. Это поможет избежать ошибок при
# использовании тех же данных с другими инструментами упорядочивания, такими как
# max(), которые полагаются на другой базовый метод. Реализация всех шести сравнений
# также помогает избежать путаницы для сравнений смешанных типов, которые могут вызывать отраженный метод __gt__().
print(sorted([5, 2, 3, 1, 4]))
# Вы также можете использовать метод list.sort(). Он изменяет список на месте (и
# возвращает None, чтобы избежать путаницы). Обычно это менее удобно, чем sorted(),
# но если вам не нужен исходный список, то немного эффективнее.
a = [5, 2, 3, 1, 4]
print(a.sort())
print(a)
