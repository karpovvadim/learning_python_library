# Создайте итератор из тех элементов iterable, для которых функция возвращает
# значение true. iterable может быть последовательностью, контейнером, поддерживающим
# итерацию, или итератором. Если функция имеет значение None, предполагается функция
# идентичности, то есть все элементы iterable, которые являются ложными, удаляются.
# Обратите внимание, что фильтр (функция, итерируемый) эквивалентен выражению
# генератора (элемент для элемента в итерируемом, если функция (элемент)), если
# функция не равна None, и (элемент для элемента в итерируемом, если элемент),
# если функция равна None.
# См. itertools.filterfalse() для дополнительной функции, которая возвращает
# элементы iterable, для которых функция возвращает false.

# Метод filter() создает итератор из элементов итерируемого объекта, для которого
# функция возвращает значение true. Проще говоря, метод filter() фильтрует данную
# итерацию с помощью функции, которая проверяет каждый элемент в итерации на
# истинность. Синтаксис:
""" filter(function, iterable) """
# filter() принимает два параметра: function — функция, которая проверяет, возвращают
# ли элементы итерируемого значения true или false. Если None, функция по умолчанию
# использует функцию Identity, которая возвращает false, если какие-либо элементы
# являются ложными. iterable — итерабельный, который должен быть отфильтрован,
# может быть наборами, списками, кортежами или контейнерами любых итераторов.
# Метод filter() возвращает итератор, который прошел проверку функции
# для каждого элемента в итерации.
print("------Пример 1: Как filter() работает для повторяющегося списка?----")
# list of letters
letters = {'a', 'b', 'd', 'e', 'i', 'j', 'o'}


def filterVowels(letter):  # function that filters vowels (гласные)
    vowels = ['a', 'e', 'i', 'o', 'u']
    if letter in vowels:
        return True
    else:
        return False


filteredVowels = filter(filterVowels, letters)
print(type(filteredVowels))
print('The filtered vowels are:')
for vowel in filteredVowels:
    print(vowel)
# Здесь у нас есть список букв, и нам нужно отфильтровать только гласные в нем.
# Мы могли бы использовать цикл for для перебора каждого элемента в списке букв и
# сохранения его в другом списке, но в Python этот процесс проще и быстрее с
# использованием метода filter(). У нас есть функция filterVowels, которая проверяет,
# является ли буква гласной. Эта функция передается методу filter() со списком букв.
# Затем метод filter() передает каждую букву методу filterVowels(), чтобы проверить,
# возвращает ли он истину или нет. В конце концов, он создает итератор тех, которые
# возвращают истину (гласные). Поскольку итератор сам по себе не сохраняет значения,
# мы перебираем его в цикле и выводим гласные одну за другой.

print("--------Пример 2: без функции фильтра--------------")
# random list
randomList = [1, 'a', 0, False, True, '0']
filteredList = filter(None, randomList)
print("next(filteredList):", next(filteredList))
print('The filtered elements are:', type(filteredList))
for element in filteredList:
    print("[1, 'a', 0, False, True, '0']: ", element)
# Здесь у нас есть случайный список чисел, строки и логических значений в randomList.
# Мы передаем randomList методу filter() с первым параметром (функцией фильтра) как
# None . Если для функции фильтра установлено значение None, функция по умолчанию
# использует функцию Identity, и каждый элемент в randomList проверяется,
# является ли он истинным или нет. Когда мы перебираем последний filterList,
# мы получаем истинные элементы: 1, a, True и ‘0’ (‘0’ как строка также истинно).
