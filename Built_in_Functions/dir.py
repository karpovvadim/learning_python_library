# Без аргументов вернуть список имен в текущей локальной области. С аргументом попытайтесь
# вернуть список допустимых атрибутов для этого объекта.
# Если у объекта есть метод с именем __dir__(), этот метод будет вызван и должен вернуть список
# атрибутов. Это позволяет объектам, которые реализуют пользовательскую функцию __getattr__()
# или __getattribute__(), настраивать способ, которым dir() сообщает свои атрибуты.
# Если объект не предоставляет __dir__(), функция делает все возможное, чтобы собрать
# информацию из атрибута __dict__ объекта, если он определен, и из его типа object.
# Результирующий список не обязательно является полным и может быть неточным, если объект
# имеет пользовательский __getattr__().
# Механизм dir() по умолчанию ведет себя по-разному с разными типами объектов, поскольку
# он пытается предоставить наиболее актуальную, а не полную информацию:
# Если объект является объектом модуля, список содержит имена атрибутов модуля.
# Если объект является объектом типа или класса, список содержит имена его атрибутов и,
# рекурсивно, атрибутов его баз.
# В противном случае список содержит имена атрибутов объекта, имена атрибутов его класса и,
# рекурсивно, атрибутов базовых классов его класса.
import struct
#  Без аргументов, dir() возвращает список имён, определённых в текущей области видимости:
# show the names in the module namespace
print("dir():      ", dir())    #  показать имена в пространстве имен модуля
#  Для выяснения имён, определенных в модуле, можно использовать встроенную функцию dir().
#  Она возвращает отсортированный список строк:
print("dir(struct):", dir(struct))   # show the names in the struct module


class Shape:
    def __dir__(self):
        return ['area', 'perimeter', 'location']


s = Shape()
print("dir(s):     ", dir(s))
# Обратите внимание, что перечисляются имена объектов всех типов: переменные, модули, функции и т.д.
# Список, возвращаемый функцией dir() не содержит имена встроенных функций и переменных
# — они определены в стандартном модуле __builtin__:  (в 10 версии нет)
# import  __builtin__
print("dir(__builtins__):", dir(__builtins__))

# Примечание
#
# Поскольку dir() предоставляется в первую очередь для удобства использования в
# интерактивной подсказке, она пытается предоставить интересный набор имен больше,
# чем пытается предоставить строго или последовательно определенный набор имен, и его
# подробное поведение может меняться в разных выпусках. Например, атрибуты метакласса
# отсутствуют в списке результатов, если аргументом является класс.

