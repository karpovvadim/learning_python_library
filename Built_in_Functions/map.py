"""map(function, iterable, /, *iterables)"""
# Возвращает итератор, который применяет функцию к каждому элементу итерации, получая
# результаты. Если передаются дополнительные аргументы итерируемых объектов, функция должна
# принимать такое количество аргументов и параллельно применяется к элементам всех итерируемых
# объектов. При использовании нескольких итераций итератор останавливается, когда исчерпана
# самая короткая итерация. Для случаев, когда входные данные функции уже организованы в
# кортежи аргументов, см. itertools.starmap().
# Функция map() применяет данную функцию к каждому элементу итерации (список, кортеж и т.д.)
# и возвращает список результатов.
# Параметр
# функция ‒ передает каждый элемент итерации этой функции.
# iterable ‒ итерируемый, который должен быть отображен.
# Вы можете передать более одной итерации функции map().
# Возвращаемое значение из карты
# Возвращаемое значение (объект карты) может быть передано в такие функции, как list()
# (для создания списка), set() (для создания набора) и т.д.
print("-----1: Как работает?--------------------------------------")


def calculateSquare(n):
    return n*n


result = map(calculateSquare, (1, 2, 3, 4))
print("map(calculateSquare, (1, 2, 3, 4)): ", result)
numbersSquare = set(result)  # converting map object to set
print("set(result):", type(numbersSquare), numbersSquare)
# В приведенном выше примере каждый элемент кортежа возведен в квадрат.
# Поскольку команда ожидает передачи функции, лямбда-функции обычно используются при
# работе с функциями map() в Python.
# Лямбда-функция ‒ это короткая функция без имени.
print("-----2: Как использовать лямбда-функцию?--------------------------")
result = map(lambda x: x*x, (2, 3, 4, 5))
print("map(lambda x: x*x, (2, 3, 4, 5)): ", result)
numbersSquare = set(result)  # converting map object to set
print("set(result):     ", numbersSquare)
#  Нет никакой разницы в функциональности этого примера и примера 1.
print("----3: Передача нескольких итераторов с использованием Lambda------")
# В этом примере добавляются соответствующие элементы двух списков.
num1 = [4, 5, 6, 11]
num2 = [5, 6, 7, 10]

result = map(lambda n1, n2: n1+n2, num1, num2)
print("map(lambda n1, n2: n1+n2, num1, num2): ", list(result))
